# implements the PredatorPrey simulation in SLogo
# neighbors in cardinal directions, toroidal borders
# Whether :a cell has moved or not this turn is untracked in the algorithm.
# up&right facing turtles are sharks, upwards facing turtles are fish. Hidden turtles represent empty slots.
# FishBreedTime = 3 SharkStarveTime = 5 SharkBreedTime = 12
# uses a crapton of variables during iteration.
# It is asked that the :size variable remain untouched to ensure proper grid behavior.
# author: Andrew Yeung

# generates a random predatorprey board of size :gridsize * :gridsize. It takes 
# @param :gridsize represents size of the square grid
to setupwator [ :gridsize ] [
	askwith [ greater? ID * :gridsize :gridsize ] [ ht seth 180 ]
	cs
	tell [ 1 ]
	pu
	setxy * -10 :gridsize * -10 :gridsize
	pd 
	repeat 4 [ fd * 20 :gridsize rt 90 ]
	# sets up the Turtles in :a grid
	tell [ ] 
	dotimes [ :a * :gridsize :gridsize ] [
		ask [ :a ] [
			setshape 0
			st
			pu
			setxy * - % - ID 1 :gridsize / - :gridsize 1 2 20  * - / - ID + 1 % - ID 1 :gridsize :gridsize / - :gridsize 1 2 20
			set :size random 1
			ifelse less? :size / 1 3 [
				seth 0 ht
			]
			[ 
				ifelse less? :size / 2 3 [ seth 30 ] [ seth 90.0005 ]
			]
		]
	]
	set :size :gridsize
]

# moves the simulation forward :count generations
# The turtles are looped through in :a diagonal fashion each generation, which allows the map to be more dynamic.
# No randomness because applying simulation rules to random cells does not guarantee that all cells are reached.
# to increase randomness, the starting point for said loop is random.
# @param :count represents the number of generations to iterate
to iteratewator [ :count ] [
	repeat :count [
		set :offset random * :size :size
		set :offset  - :offset % :offset 1
		dotimes [ :q * :size :size ] [
			set :a % ( + :q :offset * - :q 1 :size ) * :size :size
			tell [ :a ]
			if [ and showing? less? heading 180 ] [
				ifelse [ less? heading 60 ] [
					left 180.1 
					set :rand random 4
					set :rand - :rand % :rand 1
					for [ :four 0 3 1 ]  [
						set :tempOne + :four :rand
						set :tempTwo sin * 90 :tempOne
						set :tempOne cos * 90 :tempOne
						set :index % ( + * :size :size :tempOne * :tempTwo :size :a ) * :size :size
						if [ ask [ :index ] [ not showing? ] ] [
							ifelse [ greater? heading 210.45 ] [ right 0.5 ] [ ht ]
							ask [ :index ] [ seth ask [ :a ] [ heading ] st ]
							set :four 7
						] 
					]
				]
				[ 
					set :rand random 4
					set :rand - :rand % :rand 1
					for [ :four 0 3 1 ]  [
						set :tempOne + :four :rand
						set :tempTwo sin * 90 :tempOne
						set :tempOne cos * 90 :tempOne
						set :index % ( + * :size :size :tempOne * :tempTwo :size :a ) * :size :size
						if [ ask [ :index ] [ and showing? less? heading 60 ] ] [
							left 180.0501
							ifelse [ greater? heading 270.575 ] [ right 0.6 ] [ ht ]
							ask [ :index ] [ seth ask [ :a ] [ heading ] st ]
							set :four 7
						] 
					]
					if [ equal? :four 4 ] [
						left 180.0499
						ifelse [ greater? % heading 0.05 0.045 ] [ ht ] 
						[
							set :rand random 4
							set :rand - :rand % :rand 1
							for [ :four 0 3 1 ]  [
								set :tempOne + :four :rand
								set :tempTwo sin * 90 :tempOne
								set :tempOne cos * 90 :tempOne
								set :index % ( + * :size :size :tempOne * :tempTwo :size :a ) * :size :size
								if [ ask [ :index ] [ not showing? ] ] [
									ifelse [ greater? heading 270.575 ] [ right 0.6 ] [ ht ]
									ask [ :index ] [ seth ask [ :a ] [ heading ] st ]
									set :four 4
								] 
							]
						]
					]
				]
			]
		]
		tell [ ]
		repeat * :size :size [
			ask [ :repcount ] [ seth % heading 180 ]
		]
	]

]

# moves the simulation forward 1 generation
to stepwator [ ] [
	iteratewator [ 1 ]
]

# makes a simulation with the default size of 9; can be changed again by calling setupwator
setupwator 9